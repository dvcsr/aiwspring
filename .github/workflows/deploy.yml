name: Deploy to Production

# PROFESSIONAL CI/CD PIPELINE EXPLANATION:
# This workflow demonstrates industry-standard deployment practices:
# 1. Triggered on push to main branch (typical production deployment trigger)
# 2. Builds and tests the application (quality gates)
# 3. Creates deployment artifacts (JAR file)
# 4. Deploys to cloud platform (AWS/Heroku/Render)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Job 1: Build and Test (Quality Assurance)
  test:
    runs-on: ubuntu-latest
    name: Build and Test
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run Tests
      run: ./gradlew test
      
    - name: Build Application
      run: ./gradlew build -x test

  # Job 2: Deploy to Staging/Production
  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build Application for Production
      run: ./gradlew build -x test
      
    # DEPLOYMENT OPTIONS (uncomment based on your chosen platform):
    
    # Option 1: Deploy to Heroku
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.14
    #   with:
    #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
    #     heroku_app_name: "your-app-name"
    #     heroku_email: "your-email@example.com"
    
    # Option 2: Deploy to AWS Elastic Beanstalk
    # - name: Deploy to AWS EB
    #   uses: einaregilsson/beanstalk-deploy@v21
    #   with:
    #     aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     application_name: your-app-name
    #     environment_name: your-env-name
    #     region: us-east-1
    #     version_label: ${{ github.sha }}
    #     deployment_package: build/libs/demo-0.0.1-SNAPSHOT.jar
    
    # Option 3: Deploy to Render
    # - name: Deploy to Render
    #   run: |
    #     curl -X POST \
    #       -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
    #       -H "Content-Type: application/json" \
    #       -d '{"serviceId": "${{ secrets.RENDER_SERVICE_ID }}"}' \
    #       https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys
    
    - name: Deployment Status
      run: echo "Deployment configuration ready. Uncomment your chosen platform above."